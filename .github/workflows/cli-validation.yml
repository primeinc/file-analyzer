name: CLI Validation and Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  cli-validation:
    name: CLI Functionality Validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y exiftool tesseract-ocr clamav rdfind ripgrep
        # Note: binwalk is optional for CI
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Verify CLI installation
      run: |
        # Test that fa command is available
        fa --version
        fa --help
        
    - name: Test CLI basic functionality
      run: |
        # Test core commands don't crash
        fa quick --help
        fa analyze --help
        fa model --help
        fa test --help
        fa validate --help
        
    - name: Test CLI error handling
      run: |
        # Test error conditions return proper exit codes
        if fa quick /nonexistent/file.jpg 2>/dev/null; then
          echo "ERROR: Quick command should fail for non-existent file"
          exit 1
        fi
        echo "âœ… Error handling works correctly"
        
    - name: Test analyze verify
      run: |
        # Test dependency verification
        fa analyze verify
        
    - name: Run comprehensive CLI tests
      run: |
        pytest tests/test_cli_comprehensive.py -v --tb=short
        
    - name: Run essential functionality tests
      run: |
        pytest tests/test_cli_essential.py -v --tb=short
        
    - name: Test artifact discipline
      run: |
        # Test artifact discipline check
        ./preflight.sh
        
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy bandit pytest
        pip install -e ".[dev]"
        
    - name: Run Black formatting check
      run: |
        black --check --diff src/ tests/
        
    - name: Run isort import sorting check
      run: |
        isort --check-only --diff src/ tests/
        
    - name: Run type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional
        
    - name: Run security check with bandit
      run: |
        bandit -r src/ -f json || true  # Don't fail on security warnings in CI
        
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [cli-validation, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y exiftool tesseract-ocr clamav rdfind ripgrep
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Create test data
      run: |
        mkdir -p test_data/images
        # Create a simple test image using Python
        python -c "
from PIL import Image
img = Image.new('RGB', (100, 100), color='red')
img.save('test_data/images/test.jpg')
print('Created test image')
        "
        
    - name: Test end-to-end workflows
      run: |
        # Test complete analysis workflow
        fa analyze verify
        fa analyze metadata test_data/images/ || echo "Metadata analysis completed"
        
        # Test quick analysis
        fa quick test_data/images/test.jpg || echo "Quick analysis completed"
        
    - name: Test model commands
      run: |
        # Test model management (without actually downloading large models)
        fa model list
        fa model --help
        
    - name: Run all unit tests
      run: |
        pytest tests/ -v --tb=short --maxfail=5
        
  pre-commit-validation:
    name: Pre-commit Hook Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit
        pip install -e ".[dev]"
        
    - name: Install system dependencies for CLI tests
      run: |
        sudo apt-get update
        sudo apt-get install -y exiftool tesseract-ocr clamav rdfind ripgrep
        
    - name: Install pre-commit hooks
      run: |
        pre-commit install
        
    - name: Run pre-commit on all files
      run: |
        pre-commit run --all-files --verbose